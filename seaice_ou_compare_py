!git clone https://github.com/FindPrint/Multiple-studies.git
%cd Multiple-studies


!pip install seaborn


from google.colab import files

# Uploader ton script et ton CSV
uploaded = files.upload()


from google.colab import files

# Uploader ton script et ton CSV
uploaded = files.upload()


!mkdir -p code data figures
!mv seaice_ou_quadratic.py code/
!mv N_09_extent_v4.0.csv data/


data = pd.read_csv("../data/N_09_extent_v4.0.csv")


# 1. Importer les librairies
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# 2. Charger ton fichier CSV
data = pd.read_csv("../data/N_09_extent_v4.0.csv")

# 3. V√©rifier les premi√®res lignes
print(data.head())


data = pd.read_csv("data/N_09_extent_v4.0.csv")


import os
import pandas as pd
import urllib.request

# Nom du fichier attendu
filename = "N_09_extent_v4.0.csv"

# URL brute GitHub (‚ö†Ô∏è assure-toi que le fichier est bien pouss√© dans /data/ sur ton d√©p√¥t)
github_url = "https://raw.githubusercontent.com/FindPrint/Multiple-studies/main/data/N_09_extent_v4.0.csv"

# V√©rifier si le fichier existe d√©j√† localement
if not os.path.exists(filename):
    print("Fichier non trouv√© localement. T√©l√©chargement depuis GitHub...")
    urllib.request.urlretrieve(github_url, filename)
    print("T√©l√©chargement termin√©.")
else:
    print("Fichier trouv√© localement.")

# Charger le CSV avec pandas
data = pd.read_csv(filename)

# Afficher les 5 premi√®res lignes pour v√©rifier
print(data.head())


!python code/seaice_ou_quadratic.py


# üì¶ Imports n√©cessaires
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from ipywidgets import interact, FloatSlider
from mpl_toolkits.axes_grid1.inset_locator import inset_axes

# üîπ Charger les donn√©es NSIDC (septembre uniquement)
url = "https://raw.githubusercontent.com/FindPrint/Multiple-studies/main/data/N_09_extent_v4.0.csv"
data = pd.read_csv(url)
data.columns = data.columns.str.strip()
data = data[["year", "mo", "extent", "area"]].copy()
data["date"] = pd.to_datetime(dict(year=data["year"], month=data["mo"], day=1))

# üîπ Normalisation par rapport √† la climatologie 1981‚Äì2010
clim = data[(data["year"] >= 1981) & (data["year"] <= 2010)]["extent"].mean()
data["phi_star"] = data["extent"] / clim

# üîπ Fonction interactive
@interact(
    gamma=FloatSlider(value=0.13, min=0.05, max=0.3, step=0.01, description="Œ≥ (rappel)"),
    D=FloatSlider(value=0.0002, min=0.00005, max=0.001, step=0.00005, description="D (bruit)")
)
def simulate_ou(gamma, D):
    # Param√®tres du drift quadratique
    a, b, c = 1.1945, -0.000955, -0.000000033
    n_sims = 20
    n_steps = (2050 - 1979) * 12
    t = np.arange(n_steps)
    dates = pd.date_range("1979-01-01", periods=n_steps, freq="MS")
    mu_t = a + b * t + c * t**2

    # Simulations OU
    simulations, sim_sept, crossing_years = [], [], []
    for s in range(n_sims):
        phi = np.zeros(n_steps)
        phi[0] = 1.0
        for k in range(1, n_steps):
            phi[k] = phi[k-1] - gamma * (phi[k-1] - mu_t[k]) + np.sqrt(2*D) * np.random.randn()
        simulations.append(phi)

        sim_df = pd.DataFrame({"date": dates, "phi": phi})
        sim_df["month"] = sim_df["date"].dt.month
        sim_df["year"] = sim_df["date"].dt.year
        sept = sim_df[sim_df["month"] == 9].groupby("year")["phi"].mean()
        sim_sept.append(sept)
        below = sept[sept < 0.5]
        crossing_years.append(below.index[0] if not below.empty else None)

    valid_years = [y for y in crossing_years if y is not None]
    median_year = int(np.median(valid_years)) if valid_years else None

    # üîπ Figure
    plt.figure(figsize=(14, 7))
    sept_obs = data[data["mo"] == 9]
    plt.scatter(sept_obs["date"], sept_obs["phi_star"], color="black", label="Observ√© (septembre)")

    for sept in sim_sept:
        plt.plot(sept.index, sept.values, alpha=0.4, color="steelblue")

    plt.axhline(1.0, color="red", linestyle="--", label="Climatologie")
    plt.axhline(0.5, color="orange", linestyle="--", label="Seuil critique 0.5")

    plt.title(f"Banquise Arctique ‚Äî OU quadratique (Œ≥={gamma}, D={D})")
    plt.xlabel("Ann√©e")
    plt.ylabel("œÜ*(t) en septembre")
    plt.legend()
    plt.grid(True)

    if valid_years:
        ax_inset = inset_axes(plt.gca(), width="35%", height="35%", loc="upper right")
        sns.histplot(valid_years, bins=range(min(valid_years), max(valid_years)+1),
                     ax=ax_inset, color="skyblue", edgecolor="black")
        ax_inset.axvline(median_year, color="red", linestyle="--", label=f"M√©diane {median_year}")
        ax_inset.set_title("Distribution des franchissements")
        ax_inset.set_xlabel("Ann√©e")
        ax_inset.set_ylabel("Fr√©quence")
        ax_inset.legend()

    plt.tight_layout()
    plt.show()

    if median_year:
        print(f"Ann√©e m√©diane de franchissement : {median_year}")


"""
Comparaison entre trajectoire d√©terministe (D=0) et stochastiques (D>0)
pour le d√©clin de la banquise arctique en septembre.

- Drift quadratique Œº(t)
- Simulation OU avec et sans bruit
- Extraction des minima de septembre
- Calcul de l'ann√©e m√©diane de franchissement du seuil œÜ* < 0.5
- Figure de synth√®se
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from mpl_toolkits.axes_grid1.inset_locator import inset_axes

# -----------------------------
# 1. Charger les donn√©es NSIDC
# -----------------------------
url = "https://raw.githubusercontent.com/FindPrint/Multiple-studies/main/data/N_09_extent_v4.0.csv"
data = pd.read_csv(url)
data.columns = data.columns.str.strip()
data = data[["year", "mo", "extent"]].copy()
data["date"] = pd.to_datetime(dict(year=data["year"], month=data["mo"], day=1))

# Normalisation par rapport √† la climatologie 1981‚Äì2010
clim = data[(data["year"] >= 1981) & (data["year"] <= 2010)]["extent"].mean()
data["phi_star"] = data["extent"] / clim

# -----------------------------
# 2. Param√®tres du mod√®le OU
# -----------------------------
a, b, c = 1.1945, -0.000955, -0.000000033
gamma = 0.13
D_stoch = 0.0002   # bruit pour les trajectoires stochastiques
n_sims = 20

n_steps = (2050 - 1979) * 12
t = np.arange(n_steps)
dates = pd.date_range("1979-01-01", periods=n_steps, freq="MS")
mu_t = a + b * t + c * t**2

# -----------------------------
# 3. Simulation d√©terministe (D=0)
# -----------------------------
phi_det = np.zeros(n_steps)
phi_det[0] = 1.0
for k in range(1, n_steps):
    phi_det[k] = phi_det[k-1] - gamma * (phi_det[k-1] - mu_t[k])

det_df = pd.DataFrame({"date": dates, "phi": phi_det})
det_df["month"] = det_df["date"].dt.month
det_df["year"] = det_df["date"].dt.year
det_sept = det_df[det_df["month"] == 9].groupby("year")["phi"].mean()

# -----------------------------
# 4. Simulations stochastiques (D>0)
# -----------------------------
sim_sept, crossing_years = [], []
for s in range(n_sims):
    phi = np.zeros(n_steps)
    phi[0] = 1.0
    for k in range(1, n_steps):
        phi[k] = phi[k-1] - gamma * (phi[k-1] - mu_t[k]) + np.sqrt(2*D_stoch) * np.random.randn()
    sim_df = pd.DataFrame({"date": dates, "phi": phi})
    sim_df["month"] = sim_df["date"].dt.month
    sim_df["year"] = sim_df["date"].dt.year
    sept = sim_df[sim_df["month"] == 9].groupby("year")["phi"].mean()
    sim_sept.append(sept)
    below = sept[sept < 0.5]
    crossing_years.append(below.index[0] if not below.empty else None)

valid_years = [y for y in crossing_years if y is not None]
median_year = int(np.median(valid_years)) if valid_years else None

print("Ann√©es de franchissement stochastiques :", crossing_years)
print("Ann√©e m√©diane :", median_year)

# -----------------------------
# 5. Figure de synth√®se
# -----------------------------
plt.figure(figsize=(14, 7))

# Observations
sept_obs = data[data["mo"] == 9]
plt.scatter(sept_obs["date"], sept_obs["phi_star"], color="black", label="Observ√© (septembre)")

# Trajectoires stochastiques
for sept in sim_sept:
    plt.plot(sept.index, sept.values, alpha=0.4, color="steelblue")

# Trajectoire d√©terministe
plt.plot(det_sept.index, det_sept.values, color="red", linewidth=2.5, label="D√©terministe (D=0)")

# Seuils
plt.axhline(1.0, color="grey", linestyle="--", label="Climatologie")
plt.axhline(0.5, color="orange", linestyle="--", label="Seuil critique 0.5")

plt.title("Banquise Arctique ‚Äî Comparaison d√©terministe vs stochastique")
plt.xlabel("Ann√©e")
plt.ylabel("œÜ*(t) en septembre")
plt.legend()
plt.grid(True)

# Inset : histogramme des franchissements stochastiques
if valid_years:
    ax_inset = inset_axes(plt.gca(), width="35%", height="35%", loc="upper right")
    sns.histplot(valid_years, bins=range(min(valid_years), max(valid_years)+1),
                 ax=ax_inset, color="skyblue", edgecolor="black")
    ax_inset.axvline(median_year, color="red", linestyle="--", label=f"M√©diane {median_year}")
    ax_inset.set_title("Distribution des franchissements (stochastiques)")
    ax_inset.set_xlabel("Ann√©e")
    ax_inset.set_ylabel("Fr√©quence")
    ax_inset.legend()

plt.tight_layout()
plt.show()

